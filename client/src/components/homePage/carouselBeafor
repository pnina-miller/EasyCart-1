import React, { useState, useEffect } from 'react';
import img1 from "../../images/55.png"
import img2 from "../../images/22.png"
import img3 from "../../images/33.png"
import img4 from "../../images/66.png"
import getBusinessByMainCategoryService from "../../services/mainCategory";
import "../../styles/carouselTabs.css"


import { CSSTransition } from 'react-transition-group';

export default function CarouselTabs() {
    // const items = [img1, img2, img3, img4]
    const [mainCategories, setMainCategories] = useState({})

    useEffect(() => {
        
        getBusinessByMainCategoryService().then(
            business => { setMainCategories(business.allBusiness) })
    }, [])

    return (<>
   {/* <div><Carousel items={mainCategories} active={0} /></div> */}
    <div><Carousel2 items={items} active={0} /></div>
    <div><Carousel2 className="carouselAnimation" items={items} active={0} /></div>
    </>)
}

function Carousel(props) {
    const { items, level } = props
    const [direction, setDirection] = useState('')
    const [active, setActive] = useState(props.active || 0)

    useEffect(() => {
        if (items) {
            
        }
    }, [items])

    const generateItems = () => {
        let levell=level
        let jsxItems = []
        if(!items[0])return <></>
        console.log(active)
            for (var i = active - 2 ; i < active + 3; i++) {
            var index = items.length+i
            if (i < 0) {
                index = items.length + i
            } else if (i >= items.length) {
                index = i % items.length
            }
            levell = active - i
            
            items[index] && jsxItems.push(<Item key={index} id={items[index]} level={levell} />)
        }
        return <> {jsxItems} </>
    }

    const moveLeft = () => {
        var newActive = active
        newActive--
        setActive(newActive < 0 ? items?.length - 0 : newActive)
        setDirection('left')
    }

    const moveRight = () => {
        var newActive = active
        setActive((newActive + 1) % items?.length)
        setDirection('right')
    }


    return (<>
        <div id="carousel" className="noselect">
            <div className="arrow arrow-left" onClick={moveLeft}><i className="fi-arrow-left"></i></div>
            <CSSTransition
                transitionName={direction}>
                {generateItems()}
            </CSSTransition>
            <div className="arrow arrow-right" onClick={moveRight}><i className="fi-arrow-right"></i></div>
        </div>
    </>
    )
}

function Item(props) {
    const { id, level } = props
    

    const className = 'item level' + level
    return (
        <div className={className} id="perItem" style={{ backgroundImage: `url(${img3})`, borderRadius: "30px 30px 0px 0px" }}>
                         {id.mainCategoryName}
                         {/* [0].categories[0].business[0].businessName */}
                     </div>
        // <div className={className} id="perItem" style={{ backgroundImage: `url(${level.id})`, borderRadius: "30px 30px 0px 0px" }}>
        //     {id.mainCategoryName}
        // </div>
    )
}

class Carousel2 extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
            items: this.props.items,
            active: this.props.active,
            direction: ''
        }
        this.rightClick = this.moveRight.bind(this)
        this.leftClick = this.moveLeft.bind(this)
    }

    generateItems() {
        var items = []
        var level
        console.log(this.state.active)
        for (var i = this.state.active - 2; i < this.state.active + 3; i++) {
            var index = i
            if (i < 0) {
                index = this.state.items.length + i
            } else if (i >= this.state.items.length) {
                index = i % this.state.items.length
            }
            level = this.state.active - i

            items.push(<Item2 key={index} id={this.state.items[index]} level={level} />)
        }
        return <> {items} </>
    }

    moveLeft() {
        var newActive = this.state.active
        newActive--
        this.setState({
            active: newActive < 0 ? this.state.items.length - 0 : newActive,
            direction: 'left'
        })
    }

    moveRight() {
        var newActive = this.state.active
        this.setState({
            active: (newActive + 1) % this.state.items.length,
            direction: 'right'
        })
    }

    render() {
        
        return (<>
            <div id="carousel" className="noselect">
                <div className="arrow arrow-left" onClick={this.leftClick}><i className="fi-arrow-left"></i></div>
                <CSSTransition
                    transitionName={this.state.direction}>
                    {this.generateItems()}
                </CSSTransition>
                <div className="arrow arrow-right" onClick={this.rightClick}><i className="fi-arrow-right"></i></div>
            </div>
        </>
        )
    }
}

class Item2 extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
            items:props.items,
            level: this.props.level
        }
    }

    render() {
        
        const className = 'item level' + this.props.level
        return (
            <div className={className} id="perItem" style={{ backgroundImage: `url(${this.props.id})`, borderRadius: "30px 30px 0px 0px" }}>
                {this.props.items}
                {/* [0].categories[0].business[0].businessName */}
            </div>
        )
    }
}
const items = [img1, img2, img3, img4]
